// <auto-generated />
using System;
using CheckoutManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CheckoutManagement.Infrastructure.data.migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220220165609_Initial migration")]
    partial class Initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CkeckoutManagement.Core.Aggregates.ArticleLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.ToTable("ArticleLines", (string)null);
                });

            modelBuilder.Entity("CkeckoutManagement.Core.Aggregates.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Baskets", (string)null);
                });

            modelBuilder.Entity("CkeckoutManagement.Core.SyncedAggregates.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("CkeckoutManagement.Core.Aggregates.ArticleLine", b =>
                {
                    b.HasOne("CkeckoutManagement.Core.Aggregates.Basket", null)
                        .WithMany("ArticleLines")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CkeckoutManagement.Core.Aggregates.Basket", b =>
                {
                    b.OwnsOne("CkeckoutManagement.Core.ValueObjects.BasketStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("BasketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Closed")
                                .HasColumnType("bit")
                                .HasColumnName("Status_Closed");

                            b1.Property<bool>("Payed")
                                .HasColumnType("bit")
                                .HasColumnName("Status_Payed");

                            b1.HasKey("BasketId");

                            b1.ToTable("Baskets");

                            b1.WithOwner()
                                .HasForeignKey("BasketId");
                        });

                    b.OwnsOne("CkeckoutManagement.Core.ValueObjects.BasketValue", "Value", b1 =>
                        {
                            b1.Property<Guid>("BasketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("PaysVAT")
                                .HasColumnType("bit")
                                .HasColumnName("Value_PaysVAT");

                            b1.Property<double>("TotalGross")
                                .HasColumnType("float")
                                .HasColumnName("Value_TotalGross");

                            b1.Property<double>("TotalNet")
                                .HasColumnType("float")
                                .HasColumnName("Value_TotalNet");

                            b1.HasKey("BasketId");

                            b1.ToTable("Baskets");

                            b1.WithOwner()
                                .HasForeignKey("BasketId");
                        });

                    b.Navigation("Status")
                        .IsRequired();

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("CkeckoutManagement.Core.Aggregates.Basket", b =>
                {
                    b.Navigation("ArticleLines");
                });
#pragma warning restore 612, 618
        }
    }
}
